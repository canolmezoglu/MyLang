import Sprockell
prog :: [Instruction]
prog = [Load  (ImmValue 1) regB,WriteInstr  regB (IndAddr regSprID),Load  (ImmValue 1) regC,Compute  Sub regC regSprID regC,Branch  regC (Rel (2)),Jump  (Rel (42)),Load  (ImmValue 2) regE,Compute  Sub regE regSprID regE,Branch  regE (Rel (2)),Jump  (Rel (67)),Load  (ImmValue 3) regB,Compute  Sub regB regSprID regB,Branch  regB (Rel (2)),Jump  (Rel (112)),Load  (ImmValue 0) regA,WriteInstr  regA (DirAddr 4),WriteInstr  reg0 (DirAddr 1),TestAndSet  (DirAddr 0),Receive  regD,Compute  Equal regD reg0 regD,Branch  regD (Rel (-3)),WriteInstr  reg0 (DirAddr 2),TestAndSet  (DirAddr 0),Receive  regE,Compute  Equal regE reg0 regE,Branch  regE (Rel (-3)),WriteInstr  reg0 (DirAddr 3),TestAndSet  (DirAddr 0),Receive  regB,Compute  Equal regB reg0 regB,Branch  regB (Rel (-3)),TestAndSet  (DirAddr 1),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),TestAndSet  (DirAddr 2),Receive  regC,Compute  Equal regC reg0 regC,Branch  regC (Rel (-3)),TestAndSet  (DirAddr 3),Receive  regD,Compute  Equal regD reg0 regD,Branch  regD (Rel (-3)),ReadInstr  (DirAddr 4),Receive  regE,WriteInstr  regE numberIO,EndProg,TestAndSet  (DirAddr 1),Receive  regE,Compute  Equal regE reg0 regE,Branch  regE (Rel (-3)),WriteInstr  reg0 (DirAddr 0),Load  (ImmValue 100) regB,Store  regB (DirAddr 1),Load  (DirAddr 1) regA,Load  (ImmValue 0) regC,Compute  Gt regA regC regA,Branch  regA (Rel (2)),Jump  (Rel (16)),Load  (DirAddr 1) regD,Load  (ImmValue 1) regE,Compute  Sub regD regE regD,Store  regD (DirAddr 1),TestAndSet  (DirAddr 7),Receive  regB,Compute  Equal regB reg0 regB,Branch  regB (Rel (-3)),ReadInstr  (DirAddr 4),Receive  regC,Load  (ImmValue 1) regD,Compute  Add regC regD regC,WriteInstr  regC (DirAddr 4),WriteInstr  reg0 (DirAddr 7),Jump  (Rel (-19)),WriteInstr  reg0 (DirAddr 1),EndProg,TestAndSet  (DirAddr 2),Receive  regB,Compute  Equal regB reg0 regB,Branch  regB (Rel (-3)),WriteInstr  reg0 (DirAddr 0),Load  (ImmValue 100) regE,Store  regE (DirAddr 1),Load  (DirAddr 1) regD,Load  (ImmValue 0) regC,Compute  Gt regD regC regD,Branch  regD (Rel (2)),Jump  (Rel (36)),Load  (DirAddr 1) regB,Load  (ImmValue 1) regE,Compute  Sub regB regE regB,Store  regB (DirAddr 1),TestAndSet  (DirAddr 7),Receive  regC,Compute  Equal regC reg0 regC,Branch  regC (Rel (-3)),ReadInstr  (DirAddr 4),Receive  regE,Load  (ImmValue 70) regC,Compute  Sub regE regC regE,Load  (ImmValue 16) regB,Store  regE (IndAddr regB),Load  (ImmValue 8) regF,Store  regA (DirAddr 2),Store  regB (DirAddr 3),Store  regC (DirAddr 4),Store  regD (DirAddr 5),Store  regE (DirAddr 6),Load  (ImmValue 1) regA,Compute  Add regF regA regA,Load  (ImmValue 3) regB,Compute  Add regPC regB regB,Store  regB (IndAddr regA),Jump  (Abs (160)),Load  (DirAddr 2) regA,Load  (DirAddr 3) regB,Load  (DirAddr 4) regC,Load  (DirAddr 5) regD,Load  (DirAddr 6) regE,Load  (DirAddr 10) regC,WriteInstr  regC (DirAddr 4),WriteInstr  reg0 (DirAddr 7),Jump  (Rel (-39)),WriteInstr  reg0 (DirAddr 2),EndProg,TestAndSet  (DirAddr 3),Receive  regB,Compute  Equal regB reg0 regB,Branch  regB (Rel (-3)),WriteInstr  reg0 (DirAddr 0),TestAndSet  (DirAddr 7),Receive  regE,Compute  Equal regE reg0 regE,Branch  regE (Rel (-3)),ReadInstr  (DirAddr 4),Receive  regC,Load  (ImmValue 16) regE,Store  regC (IndAddr regE),Load  (ImmValue 8) regF,Store  regA (DirAddr 2),Store  regB (DirAddr 3),Store  regC (DirAddr 4),Store  regD (DirAddr 5),Store  regE (DirAddr 6),Load  (ImmValue 1) regA,Compute  Add regF regA regA,Load  (ImmValue 3) regB,Compute  Add regPC regB regB,Store  regB (IndAddr regA),Jump  (Abs (160)),Load  (DirAddr 2) regA,Load  (DirAddr 3) regB,Load  (DirAddr 4) regC,Load  (DirAddr 5) regD,Load  (DirAddr 6) regE,Load  (DirAddr 10) regB,WriteInstr  regB (DirAddr 4),WriteInstr  reg0 (DirAddr 7),WriteInstr  reg0 (DirAddr 3),EndProg,Load  (ImmValue 8) regC,Compute  Add regF regC regC,Load  (IndAddr regC) regB,Load  (ImmValue 69) regD,Compute  Add regB regD regB,Load  (ImmValue 2) regE,Compute  Add regE regF regE,Store  regB (IndAddr regE),Load  (ImmValue 1) regA,Compute  Add regA regF regA,Load  (IndAddr regA) regA,Jump  (Ind (regA)),Load  (ImmValue 1) regC,Compute  Add regC regF regC,Load  (IndAddr regC) regC,Jump  (Ind (regC))]

main = run[prog,prog,prog,prog]