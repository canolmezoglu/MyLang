import Sprockell
prog :: [Instruction]
prog = [Compute  Equal regSprID reg0 regB,Branch  regB (Rel (3)),Load  (ImmValue 1) regB,WriteInstr  regB (IndAddr regSprID),Load  (ImmValue 1) regE,Compute  Sub regE regSprID regE,Branch  regE (Rel (2)),Jump  (Rel (37)),Load  (ImmValue 2) regC,Compute  Sub regC regSprID regC,Branch  regC (Rel (2)),Jump  (Rel (62)),Load  (ImmValue 0) regA,WriteInstr  regA (DirAddr 3),Load  (ImmValue 0) regB,WriteInstr  regB (DirAddr 4),Load  (ImmValue 0) regC,WriteInstr  regC (DirAddr 5),Load  (ImmValue 0) regD,WriteInstr  regD (DirAddr 6),WriteInstr  reg0 (DirAddr 1),ReadInstr  (DirAddr 1),Receive  regE,Load  (ImmValue 2) regA,Compute  Sub regA regE regA,Branch  regE (Rel (-4)),WriteInstr  reg0 (DirAddr 2),ReadInstr  (DirAddr 2),Receive  regB,Load  (ImmValue 2) regC,Compute  Sub regC regB regC,Branch  regB (Rel (-4)),TestAndSet  (DirAddr 1),Receive  regD,Compute  Equal regD reg0 regD,Branch  regD (Rel (-3)),TestAndSet  (DirAddr 2),Receive  regE,Compute  Equal regE reg0 regE,Branch  regE (Rel (-3)),ReadInstr  (DirAddr 6),Receive  regC,WriteInstr  regC numberIO,EndProg,TestAndSet  (DirAddr 1),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),Load  (ImmValue 2) regA,WriteInstr  regA (DirAddr 1),Load  (ImmValue 1) regB,WriteInstr  regB (DirAddr 4),Load  (ImmValue 1) regC,WriteInstr  regC (DirAddr 3),ReadInstr  (DirAddr 5),Receive  regD,ReadInstr  (DirAddr 3),Receive  regA,Load  (ImmValue 1) regC,Compute  Equal regA regC regA,Compute  And regD regA regD,Branch  regD (Rel (2)),Jump  (Rel (2)),Jump  (Rel (-9)),ReadInstr  (DirAddr 6),Receive  regE,Load  (ImmValue 1) regC,Compute  Add regE regC regE,WriteInstr  regE (DirAddr 6),Load  (ImmValue 0) regA,WriteInstr  regA (DirAddr 4),WriteInstr  reg0 (DirAddr 1),EndProg,TestAndSet  (DirAddr 2),Receive  regB,Compute  Equal regB reg0 regB,Branch  regB (Rel (-3)),Load  (ImmValue 2) regB,WriteInstr  regB (DirAddr 2),Load  (ImmValue 1) regC,WriteInstr  regC (DirAddr 5),Load  (ImmValue 0) regE,WriteInstr  regE (DirAddr 3),ReadInstr  (DirAddr 4),Receive  regA,ReadInstr  (DirAddr 3),Receive  regC,Load  (ImmValue 0) regB,Compute  Equal regC regB regC,Compute  And regA regC regA,Branch  regA (Rel (2)),Jump  (Rel (2)),Jump  (Rel (-9)),ReadInstr  (DirAddr 6),Receive  regE,Load  (ImmValue 2) regC,Compute  Add regE regC regE,WriteInstr  regE (DirAddr 6),Load  (ImmValue 0) regB,WriteInstr  regB (DirAddr 5),WriteInstr  reg0 (DirAddr 2),EndProg]

main = run[prog,prog,prog]