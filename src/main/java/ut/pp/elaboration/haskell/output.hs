import Sprockell
prog :: [Instruction]
prog = [Compute  Equal regSprID reg0 regA,Branch  regA (Rel (3)),Load  (ImmValue 1) regA,WriteInstr  regA (IndAddr regSprID),Load  (ImmValue 1) regA,Compute  Sub regA regSprID regA,Branch  regA (Rel (2)),Jump  (Rel (80)),Load  (ImmValue 2) regA,Compute  Sub regA regSprID regA,Branch  regA (Rel (2)),Jump  (Rel (111)),Load  (ImmValue 3) regA,Compute  Sub regA regSprID regA,Branch  regA (Rel (2)),Jump  (Rel (142)),Load  (ImmValue 4) regA,Compute  Sub regA regSprID regA,Branch  regA (Rel (2)),Jump  (Rel (173)),Load  (ImmValue 0) regA,Push  regA,Pop  regA,WriteInstr  regA numberIO,Load  (ImmValue 0) regA,Push  regA,Pop  regA,WriteInstr  regA (DirAddr 5),WriteInstr  reg0 (DirAddr 1),ReadInstr  (DirAddr 1),Receive  regA,Load  (ImmValue 2) regB,Compute  Sub regB regA regB,Branch  regA (Rel (-4)),WriteInstr  reg0 (DirAddr 2),ReadInstr  (DirAddr 2),Receive  regA,Load  (ImmValue 2) regB,Compute  Sub regB regA regB,Branch  regA (Rel (-4)),TestAndSet  (DirAddr 1),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),TestAndSet  (DirAddr 2),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),Load  (ImmValue 3) regA,Push  regA,Pop  regA,WriteInstr  regA (DirAddr 5),ReadInstr  (DirAddr 5),Receive  regA,Push  regA,Pop  regA,WriteInstr  regA numberIO,WriteInstr  reg0 (DirAddr 3),ReadInstr  (DirAddr 3),Receive  regA,Load  (ImmValue 2) regB,Compute  Sub regB regA regB,Branch  regA (Rel (-4)),WriteInstr  reg0 (DirAddr 4),ReadInstr  (DirAddr 4),Receive  regA,Load  (ImmValue 2) regB,Compute  Sub regB regA regB,Branch  regA (Rel (-4)),TestAndSet  (DirAddr 3),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),TestAndSet  (DirAddr 4),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),Load  (ImmValue 6) regA,Push  regA,Pop  regA,WriteInstr  regA (DirAddr 5),ReadInstr  (DirAddr 5),Receive  regA,Push  regA,Pop  regA,WriteInstr  regA numberIO,EndProg,TestAndSet  (DirAddr 1),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),Load  (ImmValue 2) regA,WriteInstr  regA (DirAddr 1),TestAndSet  (DirAddr 0),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),ReadInstr  (DirAddr 5),Receive  regA,Push  regA,Load  (ImmValue 0) regA,Push  regA,Pop  regB,Pop  regA,Compute  GtE regA regB regA,Push  regA,Pop  regC,Branch  regC (Rel (2)),Jump  (Rel (11)),Load  (ImmValue 1) regA,Push  regA,Pop  regA,WriteInstr  regA (DirAddr 5),ReadInstr  (DirAddr 5),Receive  regA,Push  regA,Pop  regA,WriteInstr  regA numberIO,Jump  (Rel (1)),WriteInstr  reg0 (DirAddr 0),WriteInstr  reg0 (DirAddr 1),EndProg,TestAndSet  (DirAddr 2),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),Load  (ImmValue 2) regA,WriteInstr  regA (DirAddr 2),TestAndSet  (DirAddr 0),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),ReadInstr  (DirAddr 5),Receive  regA,Push  regA,Load  (ImmValue 1) regA,Push  regA,Pop  regB,Pop  regA,Compute  GtE regA regB regA,Push  regA,Pop  regC,Branch  regC (Rel (2)),Jump  (Rel (11)),Load  (ImmValue 2) regA,Push  regA,Pop  regA,WriteInstr  regA (DirAddr 5),ReadInstr  (DirAddr 5),Receive  regA,Push  regA,Pop  regA,WriteInstr  regA numberIO,Jump  (Rel (1)),WriteInstr  reg0 (DirAddr 0),WriteInstr  reg0 (DirAddr 2),EndProg,TestAndSet  (DirAddr 3),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),Load  (ImmValue 2) regA,WriteInstr  regA (DirAddr 3),TestAndSet  (DirAddr 0),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),ReadInstr  (DirAddr 5),Receive  regA,Push  regA,Load  (ImmValue 2) regA,Push  regA,Pop  regB,Pop  regA,Compute  GtE regA regB regA,Push  regA,Pop  regC,Branch  regC (Rel (2)),Jump  (Rel (11)),Load  (ImmValue 4) regA,Push  regA,Pop  regA,WriteInstr  regA (DirAddr 5),ReadInstr  (DirAddr 5),Receive  regA,Push  regA,Pop  regA,WriteInstr  regA numberIO,Jump  (Rel (1)),WriteInstr  reg0 (DirAddr 0),WriteInstr  reg0 (DirAddr 3),EndProg,TestAndSet  (DirAddr 4),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),Load  (ImmValue 2) regA,WriteInstr  regA (DirAddr 4),TestAndSet  (DirAddr 0),Receive  regA,Compute  Equal regA reg0 regA,Branch  regA (Rel (-3)),ReadInstr  (DirAddr 5),Receive  regA,Push  regA,Load  (ImmValue 4) regA,Push  regA,Pop  regB,Pop  regA,Compute  GtE regA regB regA,Push  regA,Pop  regC,Branch  regC (Rel (2)),Jump  (Rel (11)),Load  (ImmValue 5) regA,Push  regA,Pop  regA,WriteInstr  regA (DirAddr 5),ReadInstr  (DirAddr 5),Receive  regA,Push  regA,Pop  regA,WriteInstr  regA numberIO,Jump  (Rel (1)),WriteInstr  reg0 (DirAddr 0),WriteInstr  reg0 (DirAddr 4),EndProg]

main = run[prog,prog,prog,prog,prog]